# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command:  "aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}"

jobs:
  create-infastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create Cloudformation"
        #  command: "aws cloudformation deploy \ --template-file template.yml \ --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \ --region us-east-1"
          command: "aws cloudformation deploy \ --template-file cloudfront.yml \ --stack-name production-distro \ --parameter-overrides PipelineID=mybucket666699256332 \ --tags project=udapeople &"

 # configure-infrastructure:
  #  docker:
 #     - image: python:3.11-rc-alpine
 #   steps:
 #     - checkout
 #     - add_ssh_keys:
 #       # Added SSH fingerprints from project setting
 #         fingerprints: ["f9:f3:e1:94:16:e7:4f:02:0d:7d:16:bb:c5:84:06:b4"] 
 #     - run:
 #         name: "Configure Infrastructure"
 #         command: "apk add --update ansible"
 #     - run:
 #         name: "Run Playbook and configure server"
 #         command:  "ansible-playbook -i inventory main-remote.yml --private-key udacityprivate.pem"

  smoke_test:
    docker:
    #  - image: alpine:latest
      - image: amazon/aws-cli
    steps:
    #  - run: apk add --update curl
      - run:
          name: smoke test
    #      command: |
    #        URL="https://blog.udacity.com/"
    #        if curl -s --head ${URL}
    #        then
    #          return 0
    #        else
    ##          return 1
    #        fi
          command:  return 1 
      - destroy_environment

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
     # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
     # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
   docker:
     - image: amazon/aws-cli
   steps:
     - checkout
     - run: yum install -y tar gzip
     - run:
         name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
         command: |
           aws cloudformation \
           list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
           --no-paginate --output text > ~/textfile.txt
     - persist_to_workspace:
         root: ~/
         paths: 
           - textfile.txt 

# Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  myWorkflow:
    jobs:
    #  - create-infastructure
    #  - configure-infrastructure
    #  - smoke_test:
    #      requires:
    #        - create-infastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - promote_to_production
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production